Index
1 . Topic 1
	Installation of git

2 . Topic 3
	Rebasing

3 . Topic 4:
	History of git 

4 . Topic 2:
	Adding/Deleting a branch

5 . Topic 5:
	Tagging

Topic 1:
Installation of git:

git version control system can be installed through the following command on Ubuntu:

sudo apt-get install git

Topic 3:
Rebasing

Rebasing is the concept parallel yet slightly different to merging in git.

Here We create patches of branches and apply them on top of other branches as new commits.

It works by going to the common ancestor of the two branches (the one you’re on and the one you’re rebasing onto), getting the diff introduced by each commit of the branch you’re on,
saving those diffs to temporary files, resetting the current branch to the same commit as the branch you are rebasing onto,
and finally applying each change in turn.

To do rebasing apply the following steps:
git checkout sub_branch
git rebase main_branch

git checkout main_branch
git merge sub_branch

Topic 2:
Adding/Deleting a branch 

To add a branch, execute the following command:

git branch branch_name

To delete the branch follow the following steps:

1.) Move to any other branch preferably to the master branch using the follwoing command:
    git checkout master
    
2.) Delete the branch by executing the following command:
    git branch -d branch_name

Topic 3 Modified:

Topic 4:
History of git
In 2005, the relationship between the community that developed the Linux kernel and the commercial company that developed BitKeeper broke down,
and the tool’s free-of-charge status was revoked.
This prompted the Linux development community (and in particular Linus Torvalds, the creator of Linux) to develop their own tool based on some of the lessons they learned
while using BitKeeper.

Topic 5:
Tagging
Like most VCSs, Git has the ability to tag specific points in history as being important. Typically people use this functionality to mark release points (v1.0, and so on). In this section, you’ll learn how to list the available tags, how to create new tags, and what the different types of tags are.

Creating Tags
Git uses two main types of tags: lightweight and annotated.

Lightweight:
A lightweight tag is very much like a branch that doesn’t change – it’s just a pointer to a specific commit.
Example:
$ git tag -l "v1.8.5*"


Annotated:
Creating an annotated tag in Git is simple. The easiest way is to specify -a when you run the tag command:
Example:
$ git tag -a v1.4 -m "my version 1.4"



Topic 4:
Working with remote
Showing Your Remotes
To see which remote servers you have configured, you can run the git remote command. It lists the shortnames of each remote handle you’ve specified. If you’ve cloned your repository, you should at least see origin – that is the default name Git gives to the server you cloned from:
You can also specify -v, which shows you the URLs that Git has stored for the shortname to be used when reading and writing to that remote:

$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)


